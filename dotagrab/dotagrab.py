#--------------------------------------------------------------------------------------------------
#Made by Michael Kawano
#mhkawano@gmail.com
#--------------------------------------------------------------------------------------------------
#
#	simple tool to help me guess the best hero to pick based on enemy heroes
#
#	scrape(hero) takes in the name of a hero, and returns a list containing the name, advantage, and winrate agaisnt the inputed hero
#	average_heroes(heroes) takes a list of lists generated by scrape(hero) and averages their stats returning it as a new list.
#
#	if _main_ demonstrates the use of the above functions, and then prints out the averaged and sorted list
#       
from bs4 import BeautifulSoup
import urllib.request, urllib.error, urllib.parse
import time
import random

def key_name(hero):

	return hero['name']
def key_adv(hero):

	return hero['adv']
def key_win(hero):

	return hero['win']

def get_content(content_source):
	for data in content_source:
		yield(data.get('data-value'))

def scrape(hero):

	datalist = []
	
	headers = { 'User-Agent' : 'Mozilla/5.0' }

	req = urllib.request.Request('http://www.dotabuff.com/heroes/%s/matchups' % hero, None, headers)

	html = urllib.request.urlopen(req).read()

	soup = BeautifulSoup(html, 'html.parser')

	data_source = soup.find_all('td')

	hero_count = int(len(data_source)/5)

	data_gen = get_content(data_source)

	tempname = "None"
	tempadv = 0
	tempwin = 0
	garbage = 0

	for heroes in range(0,hero_count):
		tempname = next(data_gen)
		garbage = next(data_gen)
		tempadv = next(data_gen)
		tempwin = next(data_gen)
		garbage = next(data_gen)
		datalist.append( { 'name': tempname, 'adv': tempadv, 'win': tempwin } )

	return sorted(datalist, key=key_name)

def average_heroes(heroes):
	result = []
	tempname = 'none'
	tempadv  = 0.0
	tempwin  = 0.0
	hits = 0

	for hero in range(0,len(heroes[0])):
		tempname = heroes[0][hero]['name']
		tempadv  = float(heroes[0][hero]['adv'])
		tempwin  = float(heroes[0][hero]['win'])
		hits = 1
		for additional_heroes in range(1, len(heroes)):
			for hero_order in range(0,len(heroes[additional_heroes])):
				if (heroes[additional_heroes][hero_order]['name'] == tempname):
					tempadv  = tempadv + float(heroes[additional_heroes][hero_order]['adv'])
					tempwin  = tempwin + float(heroes[additional_heroes][hero_order]['win'])
					hits+=1
					break;

		tempadv = tempadv/hits
		tempwin = tempwin/hits

		result.append( { 'name': tempname, 'adv': tempadv, 'win': tempwin } )

	return result

if __name__ == '__main__':
	
	#heroes = [ scrape('slark'), scrape('tusk'), scrape('puck'), scrape('antimage'), scrape('dazzle') ]
	
	heroes = [ scrape('slark'), scrape('tusk') ]

	averaged = sorted(average_heroes(heroes), key=key_win)

	for hero in range(0, len(averaged)):
		print((averaged[hero]['name']))
		print((averaged[hero]['adv']))
		print((averaged[hero]['win']))

		